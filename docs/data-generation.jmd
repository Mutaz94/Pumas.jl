---
title: Data Generation
---

# Subjects

PuMaS unit of observation are `Subject`s.`

Each `Subject` is an individual composed of:

  - `id`: an unique identifier (`<:Integer`)
  - `cvs`: covariates (`<:NamedTuple`)
  - `obs`: observations (`<:AbstractVector{<:Observation}`)
  - `evs`: events (`<:AbstractVector{<:Event}`)

# NMTRAN data format

The NMTRAN schema uses a single tabular representation to describe a `Population`

A `Population` is a collection of `Subject`s

```julia
using CSV, DataFrames
data = CSV.File("examples/data1.csv") |> DataFrame
head(data)
```

One can obtain a `Population` from a NMTRAN table through the `process_nmtran` function.

```julia
using PuMaS
@doc process_nmtran
```

```julia
population = process_nmtran(data, [:sex, :wt])
show(population)
```

# Interactive

PuMaS offers an alternative to the NMTRAN schema is to generate the `Subject` specification.

```julia
using Random: seed!
seed!(0)
obs = DataFrame(time = 0:8:32,
                glucose = rand(3.9:0.1:7.1, 5))
cvs = (sex = "male", age = 25)
evs = DosageRegimen(5, addl = 3, ii = 8u"hr")
subject = Subject(cvs = cvs, obs = obs, evs = evs)
show(subject)
```

We can inspect the observations through
```julia
for obs in subject.observations
    println(obs)
end
```

Likewise for the dosage events
```julia
for evs in subject.events
    println(evs)
end
```

We can generate more complex dosage regimens by combining regimens.
```julia
regimens = DosageRegimen([0.5u"g", 0.25u"g"], time = [0, 90u"minute"])
show(regimens)
```

```julia
subject2 = Subject(id = 2,
                   evs = regimens)
show(subject2)
```

This `Subject` does not have any observations or covariates.

The dosage regimen can be inspected through.
```julia
for evs in subject2.events
    println(evs)
end
```

Since we have specified the amount values as grams, these are automatically converted to milligrams.

In a similar manner, the time specified in minutes has been automatically converted to hours.

One may construct a `Population` throught the constructor.

```julia
@doc Population
```

```julia
regimen1 = DosageRegimen(15, addl = 3, ii = 4)
regimen2 = DosageRegimen(10, addl = 4, ii = 3)
seed!(0)
population = Population(map((id, cvs, obs, evs) ->
                                Subject(id = id, cvs = cvs, obs = obs, evs = evs),
                            1:6,
                            ((sex = rand(["male", "female"]), age = rand(21:25)) for i in 1:6),
                            (DataFrame(time = 0, dv = rand(), x = rand()) for i in 1:6),
                            repeat([regimen1, regimen2], 3)))
show(population)
```

```julia
for subject in population
    println(subject)
end
```
